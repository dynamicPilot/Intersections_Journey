//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ScriptAssemblies/InputControl/InputSystem/Controllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controllers"",
    ""maps"": [
        {
            ""name"": ""ControllersMap"",
            ""id"": ""0b349954-0203-4f01-8e45-41f737683eaa"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9e947cc4-a0a9-4b8b-9f2d-c5a06655ea5e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""68b3d9ad-8e11-4b9f-b5fa-11e5b9c6639f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""81beadef-276d-4ac1-b6f3-224aebf7c484"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""2b6a7092-9907-49ff-9b4c-88d3c458f17e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheelYDirection"",
                    ""type"": ""Value"",
                    ""id"": ""8e019dbb-ea8a-403e-84bd-c33cb0fcba12"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""143e382a-c40b-4612-927f-665ef2c250e9"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""175faf1c-541a-4ede-be42-f7dd25fcb518"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ec3d77-66fd-4ef2-ae65-d025f82e8ed8"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0f9076-e2a0-4bff-a618-8c65dd297143"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7041ca9-b30f-4f44-be88-c1fad9a5643d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""967b500e-c24c-44ba-8a5c-fa62c049df1a"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""216911c8-1908-44f7-8250-cff91e87aed6"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""356f2d5a-5aea-4ada-8e7c-e41a8f532eca"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ScrollWheelYDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ControllersMap
        m_ControllersMap = asset.FindActionMap("ControllersMap", throwIfNotFound: true);
        m_ControllersMap_PrimaryTouchPosition = m_ControllersMap.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        m_ControllersMap_PrimaryTouchContact = m_ControllersMap.FindAction("PrimaryTouchContact", throwIfNotFound: true);
        m_ControllersMap_SecondaryTouchPosition = m_ControllersMap.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
        m_ControllersMap_SecondaryTouchContact = m_ControllersMap.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        m_ControllersMap_ScrollWheelYDirection = m_ControllersMap.FindAction("ScrollWheelYDirection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllersMap
    private readonly InputActionMap m_ControllersMap;
    private IControllersMapActions m_ControllersMapActionsCallbackInterface;
    private readonly InputAction m_ControllersMap_PrimaryTouchPosition;
    private readonly InputAction m_ControllersMap_PrimaryTouchContact;
    private readonly InputAction m_ControllersMap_SecondaryTouchPosition;
    private readonly InputAction m_ControllersMap_SecondaryTouchContact;
    private readonly InputAction m_ControllersMap_ScrollWheelYDirection;
    public struct ControllersMapActions
    {
        private @Controllers m_Wrapper;
        public ControllersMapActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouchPosition => m_Wrapper.m_ControllersMap_PrimaryTouchPosition;
        public InputAction @PrimaryTouchContact => m_Wrapper.m_ControllersMap_PrimaryTouchContact;
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_ControllersMap_SecondaryTouchPosition;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_ControllersMap_SecondaryTouchContact;
        public InputAction @ScrollWheelYDirection => m_Wrapper.m_ControllersMap_ScrollWheelYDirection;
        public InputActionMap Get() { return m_Wrapper.m_ControllersMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllersMapActions set) { return set.Get(); }
        public void SetCallbacks(IControllersMapActions instance)
        {
            if (m_Wrapper.m_ControllersMapActionsCallbackInterface != null)
            {
                @PrimaryTouchPosition.started -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchContact.started -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchContact;
                @PrimaryTouchContact.performed -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchContact;
                @PrimaryTouchContact.canceled -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnPrimaryTouchContact;
                @SecondaryTouchPosition.started -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchContact.started -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnSecondaryTouchContact;
                @ScrollWheelYDirection.started -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnScrollWheelYDirection;
                @ScrollWheelYDirection.performed -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnScrollWheelYDirection;
                @ScrollWheelYDirection.canceled -= m_Wrapper.m_ControllersMapActionsCallbackInterface.OnScrollWheelYDirection;
            }
            m_Wrapper.m_ControllersMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
                @PrimaryTouchContact.started += instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.performed += instance.OnPrimaryTouchContact;
                @PrimaryTouchContact.canceled += instance.OnPrimaryTouchContact;
                @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
                @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
                @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
                @ScrollWheelYDirection.started += instance.OnScrollWheelYDirection;
                @ScrollWheelYDirection.performed += instance.OnScrollWheelYDirection;
                @ScrollWheelYDirection.canceled += instance.OnScrollWheelYDirection;
            }
        }
    }
    public ControllersMapActions @ControllersMap => new ControllersMapActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IControllersMapActions
    {
        void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        void OnPrimaryTouchContact(InputAction.CallbackContext context);
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
        void OnScrollWheelYDirection(InputAction.CallbackContext context);
    }
}
